0, stopping craft based on the number of product items will be disabled.
# Setting type: Int32
# Default value: 0
# Acceptable value range: From 0 to 99
piece_blastfurnace_product_stacks_of_suppress_processing = 0

## Supply one material item only when the materials supplied to Blast furnace run out.
# Setting type: Boolean
# Default value: false
piece_blastfurnace_supply_only_when_materials_run_out = false

## When the number of fuel items stored in the container is about to become less than the specified quantity, refuel to Blast furnace will be stopped. If set to 0, stopping refuel based on the number of fuel items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_blastfurnace_fuel_count_of_suppress_processing = 1

## Refuel only when the fuel for Blast furnace runs out.
# Setting type: Boolean
# Default value: false
piece_blastfurnace_refuel_only_when_out_of_fuel = false

## Refuel only when material items are supplied to Blast furnace.
# Setting type: Boolean
# Default value: false
piece_blastfurnace_refuel_only_when_materials_supplied = false

## Store only if the product item for Blast furnace is already stored in the container. If there is no container in the range that stores product items, items are produced as usual.
# Setting type: Boolean
# Default value: false
piece_blastfurnace_store_only_if_product_exists = false

## Specify the automatic processes to allow for Campfire. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Refuel
# Acceptable values: None, Refuel
allow_processing_by_piece_firepit = Refuel

## Specifies the maximum distance Campfire will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_firepit = 8

## When the number of fuel items stored in the container is about to become less than the specified quantity, refuel to Campfire will be stopped. If set to 0, stopping refuel based on the number of fuel items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_firepit_fuel_count_of_suppress_processing = 1

## Refuel only when the fuel for Campfire runs out.
# Setting type: Boolean
# Default value: false
piece_firepit_refuel_only_when_out_of_fuel = false

## Specify the automatic processes to allow for Charcoal kiln. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Craft, Store
# Acceptable values: None, Craft, Store
# Multiple values can be set at the same time by separating them with , (e.g. Craft, Store)
allow_processing_by_piece_charcoalkiln = Craft, Store

## Specifies the maximum distance Charcoal kiln will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_charcoalkiln = 8

## When the number of material items stored in the container is about to become less than the specified quantity, the supply of materials to Charcoal kiln will be stopped. If set to 0, stopping the material supply based on the number of material items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_charcoalkiln_material_count_of_suppress_processing = 1

## When the number of product item stacks stored in the container is about to exceed the specified quantity, craft by Charcoal kiln will be stopped. If set to 0, stopping craft based on the number of product items will be disabled.
# Setting type: Int32
# Default value: 0
# Acceptable value range: From 0 to 99
piece_charcoalkiln_product_stacks_of_suppress_processing = 0

## Supply one material item only when the materials supplied to Charcoal kiln run out.
# Setting type: Boolean
# Default value: false
piece_charcoalkiln_supply_only_when_materials_run_out = false

## Store only if the product item for Charcoal kiln is already stored in the container. If there is no container in the range that stores product items, items are produced as usual.
# Setting type: Boolean
# Default value: false
piece_charcoalkiln_store_only_if_product_exists = false

## Specify the automatic processes to allow for Cooking station. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Store
# Acceptable values: None, Craft, Store
# Multiple values can be set at the same time by separating them with , (e.g. Craft, Store)
allow_processing_by_piece_cookingstation = Store

## Specifies the maximum distance Cooking station will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_cookingstation = 8

## When the number of material items stored in the container is about to become less than the specified quantity, the supply of materials to Cooking station will be stopped. If set to 0, stopping the material supply based on the number of material items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_cookingstation_material_count_of_suppress_processing = 1

## When the number of product item stacks stored in the container is about to exceed the specified quantity, craft by Cooking station will be stopped. If set to 0, stopping craft based on the number of product items will be disabled.
# Setting type: Int32
# Default value: 0
# Acceptable value range: From 0 to 99
piece_cookingstation_product_stacks_of_suppress_processing = 0

## Supply one material item only when the materials supplied to Cooking station run out.
# Setting type: Boolean
# Default value: false
piece_cookingstation_supply_only_when_materials_run_out = false

## Store only if the product item for Cooking station is already stored in the container. If there is no container in the range that stores product items, items are produced as usual.
# Setting type: Boolean
# Default value: false
piece_cookingstation_store_only_if_product_exists = false

## Specify the automatic processes to allow for Fermenter. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Craft, Store
# Acceptable values: None, Craft, Store
# Multiple values can be set at the same time by separating them with , (e.g. Craft, Store)
allow_processing_by_piece_fermenter = Craft, Store

## Specifies the maximum distance Fermenter will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_fermenter = 8

## When the number of material items stored in the container is about to become less than the specified quantity, the supply of materials to Fermenter will be stopped. If set to 0, stopping the material supply based on the number of material items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_fermenter_material_count_of_suppress_processing = 1

## When the number of product item stacks stored in the container is about to exceed the specified quantity, craft by Fermenter will be stopped. If set to 0, stopping craft based on the number of product items will be disabled.
# Setting type: Int32
# Default value: 0
# Acceptable value range: From 0 to 99
piece_fermenter_product_stacks_of_suppress_processing = 0

## Supply one material item only when the materials supplied to Fermenter run out.
# Setting type: Boolean
# Default value: false
piece_fermenter_supply_only_when_materials_run_out = false

## Store only if the product item for Fermenter is already stored in the container. If there is no container in the range that stores product items, items are produced as usual.
# Setting type: Boolean
# Default value: false
piece_fermenter_store_only_if_product_exists = false

## Specify the automatic processes to allow for Hanging brazier. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Refuel
# Acceptable values: None, Refuel
allow_processing_by_piece_brazierceiling01 = Refuel

## Specifies the maximum distance Hanging brazier will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_brazierceiling01 = 8

## When the number of fuel items stored in the container is about to become less than the specified quantity, refuel to Hanging brazier will be stopped. If set to 0, stopping refuel based on the number of fuel items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_brazierceiling01_fuel_count_of_suppress_processing = 1

## Refuel only when the fuel for Hanging brazier runs out.
# Setting type: Boolean
# Default value: false
piece_brazierceiling01_refuel_only_when_out_of_fuel = false

## Specify the automatic processes to allow for Hearth. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Refuel
# Acceptable values: None, Refuel
allow_processing_by_piece_hearth = Refuel

## Specifies the maximum distance Hearth will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_hearth = 8

## When the number of fuel items stored in the container is about to become less than the specified quantity, refuel to Hearth will be stopped. If set to 0, stopping refuel based on the number of fuel items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_hearth_fuel_count_of_suppress_processing = 1

## Refuel only when the fuel for Hearth runs out.
# Setting type: Boolean
# Default value: false
piece_hearth_refuel_only_when_out_of_fuel = false

## Specify the automatic processes to allow for Iron cooking station. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Store
# Acceptable values: None, Craft, Store
# Multiple values can be set at the same time by separating them with , (e.g. Craft, Store)
allow_processing_by_piece_cookingstation_iron = Store

## Specifies the maximum distance Iron cooking station will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_cookingstation_iron = 8

## When the number of material items stored in the container is about to become less than the specified quantity, the supply of materials to Iron cooking station will be stopped. If set to 0, stopping the material supply based on the number of material items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_cookingstation_iron_material_count_of_suppress_processing = 1

## When the number of product item stacks stored in the container is about to exceed the specified quantity, craft by Iron cooking station will be stopped. If set to 0, stopping craft based on the number of product items will be disabled.
# Setting type: Int32
# Default value: 0
# Acceptable value range: From 0 to 99
piece_cookingstation_iron_product_stacks_of_suppress_processing = 0

## Supply one material item only when the materials supplied to Iron cooking station run out.
# Setting type: Boolean
# Default value: false
piece_cookingstation_iron_supply_only_when_materials_run_out = false

## Store only if the product item for Iron cooking station is already stored in the container. If there is no container in the range that stores product items, items are produced as usual.
# Setting type: Boolean
# Default value: false
piece_cookingstation_iron_store_only_if_product_exists = false

## Specify the automatic processes to allow for Jack-o-turnip. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Refuel
# Acceptable values: None, Refuel
allow_processing_by_piece_jackoturnip = Refuel

## Specifies the maximum distance Jack-o-turnip will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_jackoturnip = 8

## When the number of fuel items stored in the container is about to become less than the specified quantity, refuel to Jack-o-turnip will be stopped. If set to 0, stopping refuel based on the number of fuel items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_jackoturnip_fuel_count_of_suppress_processing = 1

## Refuel only when the fuel for Jack-o-turnip runs out.
# Setting type: Boolean
# Default value: false
piece_jackoturnip_refuel_only_when_out_of_fuel = false

## Specify the automatic processes to allow for Sconce. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Refuel
# Acceptable values: None, Refuel
allow_processing_by_piece_sconce = Refuel

## Specifies the maximum distance Sconce will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_sconce = 8

## When the number of fuel items stored in the container is about to become less than the specified quantity, refuel to Sconce will be stopped. If set to 0, stopping refuel based on the number of fuel items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_sconce_fuel_count_of_suppress_processing = 1

## Refuel only when the fuel for Sconce runs out.
# Setting type: Boolean
# Default value: false
piece_sconce_refuel_only_when_out_of_fuel = false

## Specify the automatic processes to allow for Smelter. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Craft, Refuel, Store
# Acceptable values: None, Craft, Refuel, Store
# Multiple values can be set at the same time by separating them with , (e.g. Craft, Refuel)
allow_processing_by_piece_smelter = Craft, Store

## Specifies the maximum distance Smelter will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_smelter = 8

## When the number of material items stored in the container is about to become less than the specified quantity, the supply of materials to Smelter will be s## Settings file was created by plugin Automatics v1.5.1
## Plugin GUID: net.eidee.valheim.automatics

[automatic_door]

## You can disable this feature completely to avoid adding logic you don't need. (Game must be restart for reflect this option)
# Setting type: AutomaticsModule
# Default value: Enabled
# Acceptable values: Enabled, Disabled
module = Enabled

## Specify whether to enable the feature that automatically opens and closes the door.
# Setting type: Boolean
# Default value: true
enable_automatic_door = true

## Specify which doors are allowed to open and close automatically.
# Setting type: StringList
# Default value: WoodDoor, WoodGate, IronGate, DarkwoodGate, PieceHexagonalDoor
allow_automatic_door = WoodDoor, WoodGate, IronGate, DarkwoodGate, PieceHexagonalDoor

## Specify the interval at which the process of automatically opening the door is called. If set to less than 0.1, the function to automatically open the door will be disabled. (Unit: second)
# Setting type: Single
# Default value: 0.1
# Acceptable value range: From 0 to 8
interval_to_open = 0.1

## Specify the interval at which the process of automatically closing the door is called. If set to less than 0.1, the function to automatically close the door will be disabled. (Unit: second)
# Setting type: Single
# Default value: 0.1
# Acceptable value range: From 0 to 8
interval_to_close = 1.29

## Specify how close the player must be to the door in order for it to open automatically. (Unit: meter)
# Setting type: Single
# Default value: 2.5
# Acceptable value range: From 1 to 8
distance_for_automatic_opening = 2.5

## Specify how far the player must be from the door for the door to close automatically. (Unit: meter)
# Setting type: Single
# Default value: 2.5
# Acceptable value range: From 1 to 8
distance_for_automatic_closing = 3.55

## Specify where a message is displayed when the automatic door is enabled or disabled by a shortcut key.
# Setting type: Message
# Default value: Center
# Acceptable values: None, Center, TopLeft
automatic_door_enable_disable_toggle_message = Center

## Specify a shortcut key to enable/disable the automatic door.
# Setting type: KeyboardShortcut
# Default value: 
automatic_door_enable_disable_toggle = 

[automatic_feeding]

## You can disable this feature completely to avoid adding logic you don't need. (Game must be restart for reflect this option)
# Setting type: AutomaticsModule
# Default value: Enabled
# Acceptable values: Enabled, Disabled
module = Enabled

## Specify whether to enable the feature for animals to automatically consume feed items from players and containers.
# Setting type: Boolean
# Default value: true
enable_automatic_feeding = true

## Specify the range in which the animal searches for food. If set to 0, the default value for each animal will be used. (Unit: meter)
# Setting type: Int32
# Default value: 0
# Acceptable value range: From 0 to 64
feed_search_range = 0

## Specify whether the animal needs to approach the container or player to eat the feed.
# Setting type: Boolean
# Default value: false
need_get_close_to_eat_the_feed = false

## Specify the types of animals allowed to feed from the container.
# Setting type: AnimalType
# Default value: Tamed
# Acceptable values: None, Wild, Tamed, All
# Multiple values can be set at the same time by separating them with , (e.g. Debug, Warning)
allow_to_feed_from_container = Tamed

## Specify the types of animals allowed to feed from the player inventory.
# Setting type: AnimalType
# Default value: None
# Acceptable values: None, Wild, Tamed, All
# Multiple values can be set at the same time by separating them with , (e.g. Debug, Warning)
allow_to_feed_from_player = None

[automatic_mapping]

## You can disable this feature completely to avoid adding logic you don't need. (Game must be restart for reflect this option)
# Setting type: AutomaticsModule
# Default value: Enabled
# Acceptable values: Enabled, Disabled
module = Enabled

## Specify whether to enable the feature that automatically pinning objects and locations to the map.
# Setting type: Boolean
# Default value: true
enable_automatic_mapping = true

## Specify the range of dynamic objects to be explored. "Dynamic Object" are objects that change position, such as animals, monsters, etc. Set to 0 to disable pinning of dynamic objects. (Unit: meter)
# Setting type: Int32
# Default value: 64
# Acceptable value range: From 0 to 128
dynamic_object_mapping_range = 64

## Specify the range of static objects to be explored. "Static Object" are objects that do not change their position, such as flora, mineral, etc. Setting this to 0 disables pinning of static objects. (Unit: meter)
# Setting type: Int32
# Default value: 32
# Acceptable value range: From 0 to 128
static_object_mapping_range = 32

## Specify the range of location to be explored. "Location" is a specific place, such as dungeon, fuling village, etc. Setting this to 0 disables location pinning. (Unit: meter)
# Setting type: Int32
# Default value: 96
# Acceptable value range: From 0 to 128
location_mapping_range = 96

## Specify the animals to be automatic pinning.
# Setting type: StringList
# Default value: Boar, Piggy, Deer, Wolf, WolfCub, Lox, LoxCalf, Hen, Chicken, Hare, Bird, Fish
allow_pinning_animal = Deer

## Specify the monsters to be automatic pinning.
# Setting type: StringList
# Default value: Greyling, Neck, Ghost, Greydwarf, GreydwarfBrute, GreydwarfShaman, RancidRemains, Skeleton, Troll, Abomination, Blob, Draugr, DraugrElite, Leech, Oozer, Surtling, Wraith, Drake, Fenring, StoneGolem, Deathsquito, Fuling, FulingBerserker, FulingShaman, Growth, Serpent, Bat, FenringCultist, Ulv, DvergrRogue, DvergrMage, Tick, Seeker, SeekerBrood, Gjall, SeekerSoldier
allow_pinning_monster = 

## Specify the flora to be automatic pinning.
# Setting type: StringList
# Default value: Mushroom, Raspberries, Blueberries, CarrotSeeds, Thistle, TurnipSeeds, Cloudberries, JotunPuffs, Magecap
allow_pinning_flora = Mushroom, Raspberries, Blueberries, CarrotSeeds, Thistle, TurnipSeeds, Cloudberries, JotunPuffs, Magecap

## Specify the mineral to be automatic pinning.
# Setting type: StringList
# Default value: CopperDeposit, TinDeposit, MudPile, SilverVein, PetrifiedBone, SoftTissue
allow_pinning_mineral = CopperDeposit, TinDeposit, MudPile, SilverVein, PetrifiedBone, SoftTissue

## Specify the spawners to be automatic pinning.
# Setting type: StringList
# Default value: 
allow_pinning_spawner = 

## Specify the vehicles to be automatic pinning.
# Setting type: StringList
# Default value: Karve, Longship
allow_pinning_vehicle = Karve, Longship

## Specify the other objects to be automatic pinning.
# Setting type: StringList
# Default value: WildBeehive
allow_pinning_other = WildBeehive

## Specify the dungeons to be automatic pinning.
# Setting type: StringList
# Default value: BurialChambers, TrollCave, SunkenCrypts, MountainCave, InfestedMine
allow_pinning_dungeon = BurialChambers, TrollCave, SunkenCrypts, MountainCave, InfestedMine

## Specify the spots to be automatic pinning.
# Setting type: StringList
# Default value: InfestedTree, FireHole, DrakeNest, GoblinCamp, TarPit, DvergrExcavation, DvergrGuardTower, DvergrHarbour, DvergrLighthouse, PetrifiedBone
allow_pinning_spot = InfestedTree, FireHole, DrakeNest, GoblinCamp, TarPit, DvergrExcavation, DvergrGuardTower, DvergrHarbour, DvergrLighthouse, PetrifiedBone

## Enable automatic pinning for the portal. Portal is treated as a static object.
# Setting type: Boolean
# Default value: true
allow_pinning_portal = true

## Exclude tamed animals from automatic pinning.
# Setting type: Boolean
# Default value: true
not_pinning_tamed_animals = true

## Specify the interval at which static object mapping. Setting to 0 disables periodic static object mapping. (Unit: second)
# Setting type: Single
# Default value: 0.25
# Acceptable value range: From 0 to 4
static_object_mapping_interval = 0.25

## Specify the interval at which static objects will be cached. Mapping of static objects uses this cache. (Unit: second)
# Setting type: Int32
# Default value: 3
# Acceptable value range: From 1 to 8
static_object_caching_interval = 3

## Specify whether to save the pins of static objects.
# Setting type: Boolean
# Default value: false
save_static_object_pins = false

## Specify whether or not to automatically remove pins of objects that have been destroyed and no longer exist.
# Setting type: Boolean
# Default value: true
remove_pins_of_destroyed_object = true

## When pinning flora, it recursively searches for the same flora that exist within a specified range and merge them into a single pin. (Unit: meter)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 0 to 16
flora_pins_merge_range = 8

## Specify whether the wishbone needs to be equipped to attempt to pinning underground minerals.
# Setting type: Boolean
# Default value: true
need_to_equip_wishbone_for_underground_minerals = true

## Specify shortcut keys for mapping static objects. Setting this item disables the static object mapping at regular intervals, so that it is performed only once each time the shortcut key is pressed.
# Setting type: KeyboardShortcut
# Default value: 
static_object_mapping_key = 

[automatic_mining]

## You can disable this feature completely to avoid adding logic you don't need. (Game must be restart for reflect this option)
# Setting type: AutomaticsModule
# Default value: Enabled
# Acceptable values: Enabled, Disabled
module = Enabled

## Specify whether to enable the feature that mine minerals automatically.
# Setting type: Boolean
# Default value: true
enable_automatic_mining = false

## Specify the interval between mining attempts. (Unit: seconds)
# Setting type: Single
# Default value: 1.5
# Acceptable value range: From 0.1 to 4
mining_interval = 1.5

## Specify the maximum distance to search for a mineral. Setting to 0 the pickaxe's attack range is used. (Unit: meters)
# Setting type: Int32
# Default value: 3
# Acceptable value range: From 0 to 32
mining_range = 3

## Specify the minerals to be automatically mined.
# Setting type: StringList
# Default value: CopperDeposit, TinDeposit, MudPile, ObsidianDeposit, SilverVein, PetrifiedBone, SoftTissue
allow_mining_mineral = CopperDeposit, TinDeposit, MudPile, ObsidianDeposit, SilverVein, PetrifiedBone, SoftTissue

## Specify whether a pickaxe needs to be equipped to attempt automatic mining. Disabling this option will use the most advanced pickaxe in the player's inventory. If there is no pickaxe in the player's inventory, automatic mining will not be attempted.
# Setting type: Boolean
# Default value: true
need_to_equip_pickaxe = true

## Specify whether or not to allow mining underground minerals.
# Setting type: Boolean
# Default value: true
allow_mining_underground_minerals = true

## Specify whether or not to require a wishbone to mine underground minerals.
# Setting type: Boolean
# Default value: true
need_to_equip_wishbone_for_mining_underground_minerals = true

## Specify a shortcut key to attempt mining. If a valid shortcut key is assigned to this option, mining at regular intervals is disabled.
# Setting type: KeyboardShortcut
# Default value: 
mining_key = 

[automatic_pickup]

## You can disable this feature completely to avoid adding logic you don't need. (Game must be restart for reflect this option)
# Setting type: AutomaticsModule
# Default value: Enabled
# Acceptable values: Enabled, Disabled
module = Enabled

## Specify the range within which objects are automatically pickup. (Unit: meters)
# Setting type: Single
# Default value: 4
# Acceptable value range: From 1 to 64
automatic_pickup_range = 4

## Specify the interval within which objects are automatically pickup. Setting it to 0 disables periodic automatic pickup. (Unit: second)
# Setting type: Single
# Default value: 0.5
# Acceptable value range: From 0 to 4
automatic_pickup_interval = 0.5

## Interacting with pickable objects using this key makes it possible to pick up the same object in a range at once. If a valid shortcut key is assigned to this option, pickup at regular intervals is disabled.
# Setting type: KeyboardShortcut
# Default value: 
pickup_all_nearby_key = 

[automatic_processing]

## You can disable this feature completely to avoid adding logic you don't need. (Game must be restart for reflect this option)
# Setting type: AutomaticsModule
# Default value: Enabled
# Acceptable values: Enabled, Disabled
module = Enabled

## Specify whether to enable or disable the ability to automatically perform tasks such as cooking, refining, and refuel.
# Setting type: Boolean
# Default value: true
enable_automatic_processing = true

## Specify containers that allow automatic operations such as item supply and storage.
# Setting type: StringList
# Default value: PieceChestWood, PieceChest, PieceChestBlackmetal
allow_container = PieceChestWood, PieceChest, PieceChestBlackmetal

## Specify the automatic processes to allow for Beehive. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Store
# Acceptable values: None, Store
allow_processing_by_piece_beehive = Store

## Specifies the maximum distance Beehive will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_beehive = 8

## Store only if the product item for Beehive is already stored in the container. If there is no container in the range that stores product items, items are produced as usual.
# Setting type: Boolean
# Default value: false
piece_beehive_store_only_if_product_exists = false

## Specify the automatic processes to allow for Bonfire. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Refuel
# Acceptable values: None, Refuel
allow_processing_by_piece_bonfire = Refuel

## Specifies the maximum distance Bonfire will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_bonfire = 8

## When the number of fuel items stored in the container is about to become less than the specified quantity, refuel to Bonfire will be stopped. If set to 0, stopping refuel based on the number of fuel items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_bonfire_fuel_count_of_suppress_processing = 1

## Refuel only when the fuel for Bonfire runs out.
# Setting type: Boolean
# Default value: false
piece_bonfire_refuel_only_when_out_of_fuel = false

## Specify the automatic processes to allow for Blast furnace. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Craft, Refuel, Store
# Acceptable values: None, Craft, Refuel, Store
# Multiple values can be set at the same time by separating them with , (e.g. Craft, Refuel)
allow_processing_by_piece_blastfurnace = Craft, Store

## Specifies the maximum distance Blast furnace will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_blastfurnace = 8

## When the number of material items stored in the container is about to become less than the specified quantity, the supply of materials to Blast furnace will be stopped. If set to 0, stopping the material supply based on the number of material items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_blastfurnace_material_count_of_suppress_processing = 1

## When the number of product item stacks stored in the container is about to exceed the specified quantity, craft by Blast furnace will be stopped. If set to topped. If set to 0, stopping the material supply based on the number of material items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_smelter_material_count_of_suppress_processing = 1

## When the number of product item stacks stored in the container is about to exceed the specified quantity, craft by Smelter will be stopped. If set to 0, stopping craft based on the number of product items will be disabled.
# Setting type: Int32
# Default value: 0
# Acceptable value range: From 0 to 99
piece_smelter_product_stacks_of_suppress_processing = 0

## Supply one material item only when the materials supplied to Smelter run out.
# Setting type: Boolean
# Default value: false
piece_smelter_supply_only_when_materials_run_out = false

## When the number of fuel items stored in the container is about to become less than the specified quantity, refuel to Smelter will be stopped. If set to 0, stopping refuel based on the number of fuel items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_smelter_fuel_count_of_suppress_processing = 1

## Refuel only when the fuel for Smelter runs out.
# Setting type: Boolean
# Default value: false
piece_smelter_refuel_only_when_out_of_fuel = false

## Refuel only when material items are supplied to Smelter.
# Setting type: Boolean
# Default value: false
piece_smelter_refuel_only_when_materials_supplied = false

## Store only if the product item for Smelter is already stored in the container. If there is no container in the range that stores product items, items are produced as usual.
# Setting type: Boolean
# Default value: false
piece_smelter_store_only_if_product_exists = false

## Specify the automatic processes to allow for Spinning wheel. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Store
# Acceptable values: None, Craft, Store
# Multiple values can be set at the same time by separating them with , (e.g. Craft, Store)
allow_processing_by_piece_spinningwheel = Store

## Specifies the maximum distance Spinning wheel will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_spinningwheel = 8

## When the number of material items stored in the container is about to become less than the specified quantity, the supply of materials to Spinning wheel will be stopped. If set to 0, stopping the material supply based on the number of material items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_spinningwheel_material_count_of_suppress_processing = 1

## When the number of product item stacks stored in the container is about to exceed the specified quantity, craft by Spinning wheel will be stopped. If set to 0, stopping craft based on the number of product items will be disabled.
# Setting type: Int32
# Default value: 0
# Acceptable value range: From 0 to 99
piece_spinningwheel_product_stacks_of_suppress_processing = 0

## Supply one material item only when the materials supplied to Spinning wheel run out.
# Setting type: Boolean
# Default value: false
piece_spinningwheel_supply_only_when_materials_run_out = false

## Store only if the product item for Spinning wheel is already stored in the container. If there is no container in the range that stores product items, items are produced as usual.
# Setting type: Boolean
# Default value: false
piece_spinningwheel_store_only_if_product_exists = false

## Specify the automatic processes to allow for Standing blue-burning iron torch. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Refuel
# Acceptable values: None, Refuel
allow_processing_by_piece_groundtorchblue = None

## Specifies the maximum distance Standing blue-burning iron torch will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_groundtorchblue = 8

## When the number of fuel items stored in the container is about to become less than the specified quantity, refuel to Standing blue-burning iron torch will be stopped. If set to 0, stopping refuel based on the number of fuel items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_groundtorchblue_fuel_count_of_suppress_processing = 1

## Refuel only when the fuel for Standing blue-burning iron torch runs out.
# Setting type: Boolean
# Default value: false
piece_groundtorchblue_refuel_only_when_out_of_fuel = false

## Specify the automatic processes to allow for Standing brazier. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Refuel
# Acceptable values: None, Refuel
allow_processing_by_piece_brazierfloor01 = None

## Specifies the maximum distance Standing brazier will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_brazierfloor01 = 8

## When the number of fuel items stored in the container is about to become less than the specified quantity, refuel to Standing brazier will be stopped. If set to 0, stopping refuel based on the number of fuel items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_brazierfloor01_fuel_count_of_suppress_processing = 1

## Refuel only when the fuel for Standing brazier runs out.
# Setting type: Boolean
# Default value: false
piece_brazierfloor01_refuel_only_when_out_of_fuel = false

## Specify the automatic processes to allow for Standing green-burning iron torch. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Refuel
# Acceptable values: None, Refuel
allow_processing_by_piece_groundtorchgreen = None

## Specifies the maximum distance Standing green-burning iron torch will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_groundtorchgreen = 8

## When the number of fuel items stored in the container is about to become less than the specified quantity, refuel to Standing green-burning iron torch will be stopped. If set to 0, stopping refuel based on the number of fuel items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_groundtorchgreen_fuel_count_of_suppress_processing = 1

## Refuel only when the fuel for Standing green-burning iron torch runs out.
# Setting type: Boolean
# Default value: false
piece_groundtorchgreen_refuel_only_when_out_of_fuel = false

## Specify the automatic processes to allow for Standing iron torch. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Refuel
# Acceptable values: None, Refuel
allow_processing_by_piece_groundtorch = None

## Specifies the maximum distance Standing iron torch will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_groundtorch = 8

## When the number of fuel items stored in the container is about to become less than the specified quantity, refuel to Standing iron torch will be stopped. If set to 0, stopping refuel based on the number of fuel items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_groundtorch_fuel_count_of_suppress_processing = 1

## Refuel only when the fuel for Standing iron torch runs out.
# Setting type: Boolean
# Default value: false
piece_groundtorch_refuel_only_when_out_of_fuel = false

## Specify the automatic processes to allow for Standing wood torch. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Refuel
# Acceptable values: None, Refuel
allow_processing_by_piece_groundtorchwood = None

## Specifies the maximum distance Standing wood torch will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_groundtorchwood = 8

## When the number of fuel items stored in the container is about to become less than the specified quantity, refuel to Standing wood torch will be stopped. If set to 0, stopping refuel based on the number of fuel items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_groundtorchwood_fuel_count_of_suppress_processing = 1

## Refuel only when the fuel for Standing wood torch runs out.
# Setting type: Boolean
# Default value: false
piece_groundtorchwood_refuel_only_when_out_of_fuel = false

## Specify the automatic processes to allow for Stone oven. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Craft, Refuel, Store
# Acceptable values: None, Craft, Refuel, Store
# Multiple values can be set at the same time by separating them with , (e.g. Craft, Refuel)
allow_processing_by_piece_oven = Craft, Store

## Specifies the maximum distance Stone oven will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_oven = 8

## When the number of material items stored in the container is about to become less than the specified quantity, the supply of materials to Stone oven will be stopped. If set to 0, stopping the material supply based on the number of material items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_oven_material_count_of_suppress_processing = 1

## When the number of product item stacks stored in the container is about to exceed the specified quantity, craft by Stone oven will be stopped. If set to 0, stopping craft based on the number of product items will be disabled.
# Setting type: Int32
# Default value: 0
# Acceptable value range: From 0 to 99
piece_oven_product_stacks_of_suppress_processing = 0

## Supply one material item only when the materials supplied to Stone oven run out.
# Setting type: Boolean
# Default value: false
piece_oven_supply_only_when_materials_run_out = false

## When the number of fuel items stored in the container is about to become less than the specified quantity, refuel to Stone oven will be stopped. If set to 0, stopping refuel based on the number of fuel items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_oven_fuel_count_of_suppress_processing = 1

## Refuel only when the fuel for Stone oven runs out.
# Setting type: Boolean
# Default value: false
piece_oven_refuel_only_when_out_of_fuel = false

## Refuel only when material items are supplied to Stone oven.
# Setting type: Boolean
# Default value: false
piece_oven_refuel_only_when_materials_supplied = false

## Store only if the product item for Stone oven is already stored in the container. If there is no container in the range that stores product items, items are produced as usual.
# Setting type: Boolean
# Default value: false
piece_oven_store_only_if_product_exists = false

## Specify the automatic processes to allow for Windmill. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Store
# Acceptable values: None, Craft, Store
# Multiple values can be set at the same time by separating them with , (e.g. Craft, Store)
allow_processing_by_piece_windmill = Store

## Specifies the maximum distance Windmill will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_windmill = 8

## When the number of material items stored in the container is about to become less than the specified quantity, the supply of materials to Windmill will be stopped. If set to 0, stopping the material supply based on the number of material items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_windmill_material_count_of_suppress_processing = 1

## When the number of product item stacks stored in the container is about to exceed the specified quantity, craft by Windmill will be stopped. If set to 0, stopping craft based on the number of product items will be disabled.
# Setting type: Int32
# Default value: 0
# Acceptable value range: From 0 to 99
piece_windmill_product_stacks_of_suppress_processing = 0

## Supply one material item only when the materials supplied to Windmill run out.
# Setting type: Boolean
# Default value: false
piece_windmill_supply_only_when_materials_run_out = false

## Store only if the product item for Windmill is already stored in the container. If there is no container in the range that stores product items, items are produced as usual.
# Setting type: Boolean
# Default value: false
piece_windmill_store_only_if_product_exists = false

## Specify the automatic processes to allow for Wisp fountain. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Store
# Acceptable values: None, Store
allow_processing_by_piece_wisplure = Store

## Specifies the maximum distance Wisp fountain will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_wisplure = 8

## Store only if the product item for Wisp fountain is already stored in the container. If there is no container in the range that stores product items, items are produced as usual.
# Setting type: Boolean
# Default value: false
piece_wisplure_store_only_if_product_exists = false

## Specify the automatic processes to allow for Sap extractor . "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Store
# Acceptable values: None, Store
allow_processing_by_piece_sapcollector = Store

## Specifies the maximum distance Sap extractor  will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_sapcollector = 8

## Store only if the product item for Sap extractor  is already stored in the container. If there is no container in the range that stores product items, items are produced as usual.
# Setting type: Boolean
# Default value: false
piece_sapcollector_store_only_if_product_exists = false

## Specify the automatic processes to allow for Eitr refinery. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Store
# Acceptable values: None, Craft, Refuel, Store
# Multiple values can be set at the same time by separating them with , (e.g. Craft, Refuel)
allow_processing_by_piece_eitrrefinery = Store

## Specifies the maximum distance Eitr refinery will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_eitrrefinery = 8

## When the number of material items stored in the container is about to become less than the specified quantity, the supply of materials to Eitr refinery will be stopped. If set to 0, stopping the material supply based on the number of material items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_eitrrefinery_material_count_of_suppress_processing = 1

## When the number of product item stacks stored in the container is about to exceed the specified quantity, craft by Eitr refinery will be stopped. If set to 0, stopping craft based on the number of product items will be disabled.
# Setting type: Int32
# Default value: 0
# Acceptable value range: From 0 to 99
piece_eitrrefinery_product_stacks_of_suppress_processing = 0

## Supply one material item only when the materials supplied to Eitr refinery run out.
# Setting type: Boolean
# Default value: false
piece_eitrrefinery_supply_only_when_materials_run_out = false

## When the number of fuel items stored in the container is about to become less than the specified quantity, refuel to Eitr refinery will be stopped. If set to 0, stopping refuel based on the number of fuel items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_eitrrefinery_fuel_count_of_suppress_processing = 1

## Refuel only when the fuel for Eitr refinery runs out.
# Setting type: Boolean
# Default value: false
piece_eitrrefinery_refuel_only_when_out_of_fuel = false

## Refuel only when material items are supplied to Eitr refinery.
# Setting type: Boolean
# Default value: false
piece_eitrrefinery_refuel_only_when_materials_supplied = false

## Store only if the product item for Eitr refinery is already stored in the container. If there is no container in the range that stores product items, items are produced as usual.
# Setting type: Boolean
# Default value: false
piece_eitrrefinery_store_only_if_product_exists = false

## Specify the automatic processes to allow for Ballista. "Craft" produces items by automatically consuming the required materials. "Refuel" automatically supplies fuel items. "Store" automatically stores the produced items in containers. "Charge" automatically replenishes consumable items such as ammo.
# Setting type: Process
# Default value: Charge
# Acceptable values: None, Charge
allow_processing_by_piece_turret = Charge

## Specifies the maximum distance Ballista will search for containers. (Unit: meters)
# Setting type: Int32
# Default value: 8
# Acceptable value range: From 1 to 64
container_search_range_by_piece_turret = 8

## When the number of items stored in the container is about to become less than the specified quantity, charge to Ballista will be stopped. If set to 0, stopping charge based on the number of items will be disabled.
# Setting type: Int32
# Default value: 1
# Acceptable value range: From 0 to 999
piece_turret_number_of_items_to_stop_charge = 1

[automatic_repair]

## You can disable this feature completely to avoid adding logic you don't need. (Game must be restart for reflect this option)
# Setting type: AutomaticsModule
# Default value: Enabled
# Acceptable values: Enabled, Disabled
module = Enabled

## Specify whether to enable the feature that automatically repair items and pieces.
# Setting type: Boolean
# Default value: true
enable_automatic_repair = true

## Specify the range to search for a crafting station to be used to repair items. Setting to 0 disables periodic item repair. (Unit: meters)
# Setting type: Int32
# Default value: 16
# Acceptable value range: From 0 to 64
crafting_station_search_range = 16

## Specify whether or not to repair all items that can be repaired when the workbench GUI is opened.
# Setting type: Boolean
# Default value: false
repair_items_when_accessing_the_crafting_station = false

## Specify where the message is displayed when an item is repaired.
# Setting type: Message
# Default value: None
# Acceptable values: None, Center, TopLeft
item_repair_message = None

## Specify the range to search for a pieces to repair. Setting to 0 disables periodic pieces repairs. (Unit: meters)
# Setting type: Int32
# Default value: 16
# Acceptable value range: From 0 to 64
piece_search_range = 16

## Specify where the message is displayed when a piece is repaired.
# Setting type: Message
# Default value: None
# Acceptable values: None, Center, TopLeft
piece_repair_message = None

[general]

## Any animal can be added.\nIdentifier: a unique string that does not overlap with any other identifier. White spaces are not allowed.\nLabel: The name of the animal. Mainly used in GUI. If you specify an internal name, it will be translated automatically.\nPattern: A pattern matching the internal name of the animal. Exact matches are evaluated. You can set a regular expression by concatenating r/ at the beginning.
# Setting type: List`1
# Default value: 
custom_animal = 

## Any dungeon can be added.\nIdentifier: a unique string that does not overlap with any other identifier. White spaces are not allowed.\nLabel: The name of the dungeon. Mainly used in GUI. If you specify an internal name, it will be translated automatically.\nPattern: A pattern matching the prefab name of the dungeon. Exact matches are evaluated. You can set a regular expression by concatenating r/ at the beginning.
# Setting type: List`1
# Default value: 
custom_dungeon = 

## Any flora can be added.\nIdentifier: a unique string that does not overlap with any other identifier. White spaces are not allowed.\nLabel: The name of the flora. Mainly used in GUI. If you specify an internal name, it will be translated automatically.\nPattern: A pattern matching the internal name of the flora. Exact matches are evaluated. You can set a regular expression by concatenating r/ at the beginning.
# Setting type: List`1
# Default value: 
custom_flora = 

## Any mineral can be added.\nIdentifier: a unique string that does not overlap with any other identifier. White spaces are not allowed.\nLabel: The name of the mineral. Mainly used in GUI. If you specify an internal name, it will be translated automatically.\nPattern: A pattern matching the internal name of the mineral. Exact matches are evaluated. You can set a regular expression by concatenating r/ at the beginning.
# Setting type: List`1
# Default value: 
custom_mineral = 

## Any monster can be added.\nIdentifier: a unique string that does not overlap with any other identifier. White spaces are not allowed.\nLabel: The name of the monster. Mainly used in GUI. If you specify an internal name, it will be translated automatically.\nPattern: A pattern matching the internal name of the monster. Exact matches are evaluated. You can set a regular expression by concatenating r/ at the beginning.
# Setting type: List`1
# Default value: 
custom_monster = 

## Any spawner can be added.\nIdentifier: a unique string that does not overlap with any other identifier. White spaces are not allowed.\nLabel: The name of the spawner. Mainly used in GUI. If you specify an internal name, it will be translated automatically.\nPattern: A pattern matching the internal name of the spawner. Exact matches are evaluated. You can set a regular expression by concatenating r/ at the beginning.
# Setting type: List`1
# Default value: 
custom_spawner = 

## Any spot can be added.\nIdentifier: a unique string that does not overlap with any other identifier. White spaces are not allowed.\nLabel: The name of the spot. Mainly used in GUI. If you specify an internal name, it will be translated automatically.\nPattern: A pattern matching the prefab name of the spot. Exact matches are evaluated. You can set a regular expression by concatenating r/ at the beginning.
# Setting type: List`1
# Default value: 
custom_spot = 

## Any door can be added.\nIdentifier: a unique string that does not overlap with any other identifier. White spaces are not allowed.\nLabel: The name of the door. Mainly used in GUI. If you specify an internal name, it will be translated automatically.\nPattern: A pattern matching the internal name of the door. Exact matches are evaluated. You can set a regular expression by concatenating r/ at the beginning.
# Setting type: List`1
# Default value: 
custom_door = 

## Any vehicle can be added.\nIdentifier: a unique string that does not overlap with any other identifier. White spaces are not allowed.\nLabel: The name of the vehicle. Mainly used in GUI. If you specify an internal name, it will be translated automatically.\nPattern: A pattern matching the prefab name of the vehicle. Exact matches are evaluated. You can set a regular expression by concatenating r/ at the beginning.
# Setting type: List`1
# Default value: 
custom_vehicle = 

## Any object can be added.\nIdentifier: a unique string that does not overlap with any other identifier. White spaces are not allowed.\nLabel: The name of the object. Mainly used in GUI. If you specify an internal name, it will be translated automatically.\nPattern: A pattern matching the internal or prefab name of the object. Exact matches are evaluated. You can set a regular expression by concatenating r/ at the beginning.
# Setting type: List`1
# Default value: 
custom_other = 

## Any container can be added.\nIdentifier: a unique string that does not overlap with any other identifier. White spaces are not allowed.\nLabel: The name of the container. Mainly used in GUI. If you specify an internal name, it will be translated automatically.\nPattern: A pattern matching the internal or prefab name of the container. Exact matches are evaluated. You can set a regular expression by concatenating r/ at the beginning.
# Setting type: List`1
# Default value: 
custom_container = 

[hidden]

## [automatics_config_hidden_NexusID_description]
# Setting type: Int32
# Default value: 1700
NexusID = 1700

[system]

## Specify whether to enable log output. System initialization logs for Automatics are always output regardless of the value of this option.
# Setting type: Boolean
# Default value: false
enable_logging = false

## Specify the log level that allows logging.
# Setting type: LogLevel
# Default value: Fatal, Error, Warning, Message
# Acceptable values: None, Fatal, Error, Warning, Message, Info, Debug, All
# Multiple values can be set at the same time by separating them with , (e.g. Debug, Warning)
log_level_to_allow_logging = Fatal, Error, Warning, Message

